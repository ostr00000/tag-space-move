# This file may be generated from template.
# If you want to customize it, then place custom content between
# special markers `START_SKIP_AREA`, `END_SKIP_AREA`.

[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'

[project]
# START_SKIP_AREA
name = 'tag-space-tools'
description = "Tool to fix tags for TagSpaces."
dependencies = [
    'PyQt5',
    'more_itertools',
    'progressbar2',
    'ostr00000-utils @ git+https://github.com/ostr00000/ostr00000-utils@master#egg=pyqt-utils',
    'pyqt-settings @ git+https://github.com/ostr00000/pyqt-settings@master#egg=pyqt-settings',
]
# END_SKIP_AREA
authors = [{name = 'ostr00000'}]
version = '0.5.0'
requires-python = '>=3.12'

# START_SKIP_AREA
[project.scripts]
tag-space-tools = 'tag_space_tools.gui.__main__:main'
# END_SKIP_AREA
[tool.black]
skip-string-normalization = true

[tool.mypy]
files = './src/'
warn_unused_configs = true
check_untyped_defs = true
warn_unused_ignores = true

[tool.pyright]
venvPath = ".."
venv = "manager_standalone_env"
reportIncompatibleMethodOverride = false

[tool.pyright.defineConstant]
# to correctly detect QT in `qtpy`
PYQT5 = true
PYQT6 = false
PYSIDE2 = false
PYSIDE6 = false

[tool.ruff]
# https://docs.astral.sh/ruff/configuration/
target-version = "py312"
unsafe-fixes = true
namespace-packages = ["src/manager/actions"] # START_SKIP_AREA END_SKIP_AREA

[tool.ruff.lint]
select = [
    'F', # Pyflakes
    'E', # pycodestyle: Error
    'W', # pycodestyle: Warning
    'C90', # mccabe
    'I', # isort
    # 'N', # pep8-naming # SKIP: we use camelCase style
    'D', # pydocstyle
    'UP', # pyupgrade
    'YTT', # flake8-2020
    # 'ANN', # flake8-annotations # SKIP: annotations are optional
    'ASYNC', # flake8-async
    'TRIO', # flake8-trio
    'S', # flake8-bandit
    'BLE', # flake8-blind-except
    'FBT', # flake8-boolean-trap
    'B', # flake8-bugbear
    'A', # flake8-builtins
    'COM', # flake8-commas
    # 'CPY', # flake8-copyright # SKIP: copyright should be added once, in file
    'C4', # flake8-comprehensions
    'DTZ', # flake8-datetimez
    'T10', # flake8-debugger
    'DJ', # flake8-django
    'EM', # flake8-errmsg
    'EXE', # flake8-executable
    'FA', # flake8-future-annotations
    'ISC', # flake8-implicit-str-concat
    'ICN', # flake8-import-conventions
    'G', # flake8-logging-format
    'INP', # flake8-no-pep420
    'PIE', # flake8-pie # NOTE: not sure if this work?
    'T20', # flake8-print
    'PYI', # flake8-pyi
    'PT', # flake8-pytest-style
    # 'Q', # flake8-quotes # SKIP: we have rule: single for programmer, double for user
    'RSE', # flake8-raise
    'RET', # flake8-return
    'SLF', # flake8-self
    'SLOT', # flake8-slots
    'SIM', # flake8-simplify
    'TID', # flake8-tidy-imports # NOTE: in some dynamic packages, we want to ignore TID252
    'TCH', # flake8-type-checking
    'INT', # flake8-gettext # NOTE: not working for QT tr
    # 'ARG', # flake8-unused-arguments # SKIP: this may be part of API, overridden in subclass
    'PTH', # flake8-use-pathlib
    'TD', # flake8-todos
    'FIX', # flake8-fix me
    'ERA', # eradicate
    'PD', # pandas-vet
    'PGH', # pygrep-hooks
    'PL', # Pylint
    'TRY', # tryceratops
    'FLY', # flynt
    'NPY', # NumPy-specific rules
    'AIR', # Airflow
    'PERF', # Perflint
    'FURB', # refurb
    'LOG', # flake8-logging
    'RUF', # Ruff-specific rules
]
unfixable = [
    'B', # flake8-bugbear
    'F841', # remove unused variable
    'ERA001', # commented-out-code
    'RUF100', # unused-noqa # SKIP: better check manually why the `noqa` marker was placed
]
ignore = [
    'D1', # Missing docstring # SKIP: this is not API library
    'G004', # Checks for uses of f-strings to format logging messages. # SKIP: there is little performance gain and the code seems to be prettier
    'COM812', # Checks for the absence of trailing commas. # SKIP: `black` adds it when needed
]
external = [
    "F841", # SKIP: this is code used in vulture
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.pylint]
max-args = 8

[tool.vulture]
# ignore_names = []
make_whitelist = true
min_confidence = 80
paths = ["src"]
sort_by_size = true
